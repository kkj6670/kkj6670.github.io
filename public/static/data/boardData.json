{"git":{"setting-line-break":{"fileName":"setting-line-break","title":"Git 개행문자(crlf, lf) 설정","date":"2021-11-14 16:45","tag":["crlf","개행","설정","기본세팅"],"content":"## OS별 Line Break\r\nwindows : CRLF / CR(Carriage-Return, \\r) + LF(Line Feed, \\n)\r\nunix, mac : LF(Line Feed, \\n)\r\n\r\n## Line Break 설정 (core.eol)\r\n- core.eol = native - 기본 OS의 설정으로 사용\r\n- core.eol = crlf - CRLF로 사용\r\n- core.eol = lf - LF로 사용\r\n  \r\n```text\r\n// 설정\r\ngit config --global core.eol native\r\n\r\n// 조회\r\ngit config --global --list|grep core.eol\r\n```\r\n\r\n## Auto CRLF 처리 (core.autocrlf)\r\n- core.autocrlf = false - 파일 그대로 check in, check out  \r\n\r\n- core.autocrlf = true - CRLF -> LF로 변경  \r\n\r\n- core.autocrlf = input - LF로 사용\r\n\r\n```text\r\n// 설정\r\ngit config --global core.autocrlf native\r\n\r\n// 조회\r\ngit config --global --list|grep core.autocrlf\r\n```\r\n\r\n## OS별 설정법  \r\n\r\n### windows\r\n저장소에서 가져올 때 LF -> CRLF로 변경하고  \r\n저장소로 보낼 때는 CRLF -> LF 로 변경하도록 true 로 설정한다.\r\n\r\n```text\r\ngit config --global core.autocrlf true\r\n```\r\n\r\n### unix, mac\r\n\r\n```text\r\ngit config --global core.autocrlf input\r\n```"},"setting-alais":{"fileName":"setting-alais","title":"Git Alias 설정","date":"2021-11-06 16:52","tag":["설정","단축키","기본세팅"],"content":"## Alias 설정\r\n```text\r\n// 추가\r\n$ git config --global alias.cm commit\r\n\r\n// 삭제\r\n$ git config --global --unset alias.ci\r\n\r\n// 목록\r\n$ git config --global --get-regexp alias\r\n```\r\n\r\n## Alias 기본 설정 모음\r\n```text\r\n// status\r\ngit config --global alias.st\r\n\r\n// commit\r\ngit config --global alias.cm\r\n\r\n// branch\r\ngit config --global alias.br\r\n\r\n// checkout\r\ngit config --global alias.co\r\n\r\n// Log Style 설정\r\ngit config --global alias.lg log \"--graph --abbrev-commit --decorate --format=format:'%C(cyan)%h%C(reset) - %C(green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(yellow)%d%C(reset)' --all\"\r\n```"}},"javascript":{"javascript-engine":{"fileName":"javascript-engine","title":"자바스크립트 엔진","date":"2021-11-21 13:28","tag":["엔진","기초"],"content":"# 자바스크립트 엔진\r\n\r\n![기본엔진](https://lh3.googleusercontent.com/pw/AM-JKLXagVMlC7MwP_VYS3DtolnCJZBmUGBiNkUjx7bIx_p1DG_np9b-5rxnsiQERilP3yq8aEQrCm1ss7cykfOUdQAf5ovJ2HDPiGrh26r_Z1r8wUG7xfBKEBiCrxcSfOi8UJkU8ubAFSBKM2ZLoebU_rmN=w605-h304-no?authuser=1)\r\n\r\n## Call Stack\r\n- 코드가 실행되면서 스택 프레임이 쌓이는 장소\r\n- 하나의 호출스택을 사용, Run to Completion :  단 하나의 함수가 실행되면, 해당 함수의 실행이 끝날 때까지 다른 어떤 Task들도 수행될 수 없음을 의미.\r\n        \r\n```js\r\nfunction add(x, y){\r\n    return x+y;\r\n}\r\n\r\nfunction first(){\r\n    var i = add(1,1); \r\n    console.log(i);\r\n}\r\n\r\nfirst();\r\n```\r\n\r\n![콜스택](https://lh3.googleusercontent.com/pw/AM-JKLUrv10OYvsLUxVcRUTGhdoTM3fRK3k9vJbBHr30KjpDd2WjULThn2HBHG6gnputr95evJd2NyBSJYrz_L6hjxs9cE6UCSKCyQbL56wHBzm0CY2Afz1UbEAgS3UbVB1HeQtYMLFfnSgEVCK3uOgPG8na=w700-h338-no?authuser=1)\r\n        \r\n    \r\n## Heap\r\n- 동적으로 생성된 객체(인스턴스)는 Heap 영역에 할당\r\n- 동적 할당 변수는 컴파일러는 얼마나 많은 메모리를 필요로 할지 알수없음.\r\n        \r\n스택에 변수를 위한 공간을 할당할 수 없기 때문에, 동적 변수를 런타임 시점에 Heap 공간에 할당\r\n        \r\n## Task Queue(Evnet Queue)\r\n- 처리해야하는 Task들을 임시로 저장하는 대기 Queue\r\n- Task들은 Call Stack이 empty일때, 대기열에 들어온 순서대로 수행\r\n    \r\n![런타임 동작 gif](https://lh3.googleusercontent.com/pw/AM-JKLUTwO7nZ7T-nxkwXUq5Ix9ScMI_KPc985QUC7JaPfxrgtyafE8KoZCTYNsbQKjZV_tcudN1PtZ4YsSE9hhBcGs_NOW7W3y_pSMx7ID4lqk15578_wLcUoiEm3uQC53-CTJuc5vSaB-4VmqdeuIE5OyM=w1294-h904-no?authuser=1)\r\n    \r\n- 비동기로 호출되는 함수들은 Call Stack에 쌓이지 않고 Task Queue에 enQueue처리\r\n- 이벤트에 의해 실행되는 함수(핸들러)들이 비동기로 실행됨.\r\n- 자바스크립트 엔진이 아닌 Web Api영역에 정의되어 있는 함수들은 비동기로 실행된다.\r\n    \r\n\r\n## 런타임 동작 예제\r\n\r\n![런타임 동작 gif](https://lh3.googleusercontent.com/pw/AM-JKLXrhcVCkfR4I4N8F_JLDTN0PeLWZwSQWo0X5K0qkEtZGbh8c_o7Ipgf6y6ozcGjRJpsrBBOWsszGxMG6-MZP6DEVLmh4KteFEtsM3k6cNd2pduZAkRcKpo8wVMCaC2zFwU7YUD9tWizvTQMaHN4MHr5=w1498-h990-no?authuser=1)\r\n\r\n## 렌더 큐\r\n\r\n![렌더 큐](https://lh3.googleusercontent.com/pw/AM-JKLUBRzSgDFETEu1u751zILs0FioZk9GCsfJPTdOdUrAZp9cY1dh9gEDckpcNV8kXRA2ky6XD1XycVh_UGZ_DCz_uScjr48VWqTs1GJdbV_d14qfaOlOLN1cKbVLNcrwH9JmRAPxz3v3n3uu4V3cSB97Y=w1294-h1100-no?authuser=1)\r\n\r\n- 브라우저는 1초에 60프레임 속도로 화면을 다시 그립니다(Repaint).\r\n- 하지만 자바스크립트가 하는 일들로 인해 Repaint 작업에 영향을 받습니다.\r\n- 렌더도 큐에 쌓여 있는 하나의 콜백처럼 동작하기 때문에, 콜 스택에 코드가 있으면 렌더링 하지 못합니다.\r\n\r\n- 느린 동기식 루프를 실행하면, 콜 스택에 코드가 쌓여있기 때문에 렌더가 동작하지 않습니다.\r\n- 이벤트 루프를 막지 말라고 하는 것이 이러한 현상을 뜻합니다.\r\n- 콜 스택에 쓸데없는 느린 코드를 쌓아서 브라우저가 할 일(렌더링)을 못 하게 하는 일이 없어야 합니다.\r\n- 단위가 큰 코드는 작은 단위로 쪼개거나, 오래 걸리는 작업들은 비동기로 동작시키는 것이 좋습니다."}}}